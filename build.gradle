apply plugin: 'java'
apply plugin:'application'
apply plugin: 'eclipse'
apply plugin: 'com.bmuschko.izpack'


// Variables
def applicationTitle = 'PMExpert'
def projectDir = 'ninefoo'
def applicationBanner	 ="\n\n"
applicationBanner	 	+="  .########..##.....##.########.##.....##.########..########.########..########\n"
applicationBanner	 	+="  .##.....##.###...###.##........##...##..##.....##.##.......##.....##....##...\n"
applicationBanner	 	+="  .##.....##.####.####.##.........##.##...##.....##.##.......##.....##....##...\n"
applicationBanner	 	+="  .########..##.###.##.######......###....########..######...########.....##...\n"
applicationBanner	 	+="  .##........##.....##.##.........##.##...##........##.......##...##......##...\n"
applicationBanner	 	+="  .##........##.....##.##........##...##..##........##.......##....##.....##...\n"
applicationBanner	 	+="  .##........##.....##.########.##.....##.##........########.##.....##....##...\n"

version = '1.0'
mainClassName = projectDir + ".application.Application"

sourceSets {
	main{
		java {
			srcDir "src/main/java"
			output.classesDir   = 'build/classes/main'
		}

		resources{
			srcDir "src/main/resources"
			output.resourcesDir   = 'build/resources/main'
		}
	}
}

repositories {
    mavenCentral()
}

// For izpack
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-izpack-plugin:2.1'
    }
}

// Custom jar file name and folder
libsDirName = applicationTitle + '_jar'
archivesBaseName = applicationTitle

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.2'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'
	compile 'com.fasterxml.jackson.core:jackson-core:2.5.4'
	compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.4'
	compile 'net.sourceforge.jdatepicker:jdatepicker:1.3.2'
	testCompile group: 'junit', name: 'junit', version: '4.12'
	izpack 'org.codehaus.izpack:izpack-standalone-compiler:4.3.4'
}

// Creating a jar
task pmexpert_jar (type: Jar) {
	description 'Export application to jar'
	manifest {
	    attributes  'Implementation-Title': applicationTitle,
	                'Implementation-Version': version,
	                'Main-Class': mainClassName
	}
	from sourceSets.main.runtimeClasspath
	from configurations.compile.collect { zipTree it }
}

// Print and create application
task pmexpert(dependsOn:['clean', 'build']) << {
	println '\n>> Exporting ' + applicationTitle + ' to jar file...\n'
	pmexpert_jar.execute()

	//println '\n>> Generating Javadoc...\n'
	//myJavadocs.execute()

	println '\n>> Creating launcher.bat\n'
	new File('build/' + libsDirName + '/launcher.bat').write 'java -jar "' + archivesBaseName + '-' + version + '.jar"'
}

// Generate Javadoc
task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}

// izpack task
izpack {
    baseDir = file("$buildDir/" + libsDirName)
    installFile = file('src/main/izpack/install.xml')
    outputFile = file("$buildDir/distributions/" + libsDirName + "-installer.jar")
}

// Disable task for build
jar.enabled = false

// TESTING Enabled/Disabled
test.enabled = false;

// Order of execution
build.mustRunAfter(clean)
run.mustRunAfter(build)

// Print banner
println applicationBanner

// Print Java path used
println "System's JAVA_HOME: " + System.getProperty("java.home")
